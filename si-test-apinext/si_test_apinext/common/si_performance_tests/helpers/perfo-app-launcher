#!/bin/bash

# Add the c binaries to the current script execution path
ABS_PATH=$(realpath "${BASH_SOURCE:-$0}")
# echo 'The absolute path is:' $ABS_PATH
REL_PATH=$(dirname $ABS_PATH)
# echo 'The Directory Path is:' $REL_PATH

export PATH=$PATH:$REL_PATH

# This script and the code for computestats and computestatsf has been taken
# from system/extras/app-launcher to test launching the BMW reference
# and core applications on BMW devices.

parseoptions() {
    verbose=false
    user_experience=false
    little_cores_off=false
    iterations=0
    pagecached=false
    adb="adb"
    path_to_store_output_file=""

    while [ $# -ge 1 ]
    do
        case $1 in
            -a)
                iterations=$2
                shift
                ;;
            -b)
                iterations=$2
                little_cores_off=true
                shift
                ;;
            -c)
                iterations=$2
                pagecached=true
                shift
                ;;
            -h)
                usage
                ;;
            -r)
                path_to_store_output_file=$2
                shift
                ;;
            -s)
                if [ -z $2 ]; then
                    usage
                fi
                adb="adb -s $2"
                iterations=$3
                shift
                ;;
            -u)
                iterations=$2
                user_experience=true
                shift
                ;;
            -v)
                iterations=$2
                verbose=true
                shift
                ;;
            *)
                usage
                ;;
        esac
        shift
    done

    if [ $iterations -lt 50 ]; then
        usage
    fi
}

getstats () {
    infile=$1
    app=$2
    echo "Data for $app :"

    # Activity Manager reports ThisTime and TotalTime. TotalTime seems to be
    # a more measure of the launch from the users perspective. So using TotalTime
    # as our metric for launch latency

    # From Activity Manager
    echo "Total test time :"
    fgrep 'Total test time' $infile | awk '{print $4}' | $computestatsf $app 'total_test_time' $path_to_store_output_file

    # Data from simpleperf
    echo "cpu-cycles :"
    fgrep cpu-cycles $infile | awk '{print $1}' | sed s/,//g | $computestats $app 'cpu-cycles' $path_to_store_output_file

    # CPU util% Data from /proc/stat
    echo "cpu-util% :"
    fgrep 'Total CPU util' $infile | awk '{print $5}' | $computestatsf $app 'total_cpu_util' $path_to_store_output_file
    echo "user-cpu-util% :"
    fgrep 'User CPU util' $infile | awk '{print $5}' | $computestatsf $app 'user_cpu_util' $path_to_store_output_file
    echo "sys-cpu-util% (incl hardirq/softirq) :"
    fgrep 'Sys CPU util' $infile | awk '{print $5}' | $computestatsf $app 'sys_cpu_util' $path_to_store_output_file

    if [ $verbose == true ]; then
        echo "instructions :"
        fgrep instructions $infile | awk '{print $1}' | sed s/,//g | $computestats $app 'instructions' $path_to_store_output_file

        echo "cycles per instruction :"
        fgrep instructions $infile | awk '{print $4}' | sed s/,//g | $computestatsf $app 'cycles_per_instruction' $path_to_store_output_file

        echo "branch-misses :"
        fgrep branch-misses $infile | awk '{print $1}' | sed s/,//g | $computestats $app 'branch-misses' $path_to_store_output_file

        echo "context-switches :"
        fgrep context-switches $infile | awk '{print $1}' | sed s/,//g | $computestats $app 'context-switches' $path_to_store_output_file

        echo "page-faults :"
        fgrep page-faults $infile | awk '{print $1}' | sed s/,//g | $computestats $app 'page-faults' $path_to_store_output_file
    fi

    if [ $system_bdev_set == true ]; then
        # (Storage) Data from /proc we've collected
        echo "KB read for $system_block_device blkdev :"
        fgrep KB $infile | grep system | awk '{print $5}' | $computestats $app "KB_read_for_${system_block_device}_blkdev" $path_to_store_output_file

        echo "iowait% :"
        fgrep IOwait $infile | awk '{print $3}' | $computestatsf $app 'iowait' $path_to_store_output_file

        echo "Device util% for $system_block_device blkdev :"
        fgrep 'Device util' $infile | awk '{print $4}' | $computestatsf $app "device_util_for_${system_block_device}_blkdev" $path_to_store_output_file
    fi
}

cpufreq_volantis() {
    echo "Setting Governor to performance"
    if [ $little_cores_off == true ]; then
        echo "Cannot turn off Little cores on $model"
        exit 1
    fi
    i=0
    num_cores=2
    while [ $i -lt  $num_cores ]
    do
        $adb shell "echo performance  > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_g\
overnor"
        $adb shell "echo 2499000 > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_fr\
eq"
        i=`expr $i + 1`
    done
    # Lock the GPU frequencies
    echo -n 852000000 > /d/clock/override.gbus/rate
    echo -n 1 > /d/clock/override.gbus/state
}

cpufreq_fugu() {
    echo "Setting Governor to performance"
    if [ $little_cores_off == true ]; then
        echo "Cannot turn off Little cores on $model"
        exit 1
    fi
    i=0
    num_cores=4
    while [ $i -lt  $num_cores ]
    do
        $adb shell "echo performance  > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
        $adb shell "echo 1833000 > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq"
        i=`expr $i + 1`
    done
}

cpufreq_taimen_walleye () {
    echo "Setting Governor to performance"
    # GPU Governor and Frequency
    $adb shell 'echo performance > /sys/class/kgsl/kgsl-3d0/devfreq/governor'
    $adb shell 'echo 624000000 > /sys/class/kgsl/kgsl-3d0/devfreq/max_freq'
    if [ $little_cores_off == true ]; then
        # Disable Little Cores, force app to run on big cores
        echo "Disabling Little Cores"
        $adb shell 'echo 0 > /sys/devices/system/cpu/cpu0/online'
        $adb shell 'echo 0 > /sys/devices/system/cpu/cpu1/online'
        $adb shell 'echo 0 > /sys/devices/system/cpu/cpu2/online'
        $adb shell 'echo 0 > /sys/devices/system/cpu/cpu3/online'
    else
        echo "Enabling All Cores"
        $adb shell 'echo 1 > /sys/devices/system/cpu/cpu0/online'
        $adb shell 'echo 1 > /sys/devices/system/cpu/cpu1/online'
        $adb shell 'echo 1 > /sys/devices/system/cpu/cpu2/online'
        $adb shell 'echo 1 > /sys/devices/system/cpu/cpu3/online'
        $adb shell 'echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'
        $adb shell 'echo 1900800 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq'
    fi
    # Set Governor to performance, up scaling_max_frequency to highest
    $adb shell 'echo performance  > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor'
    # Only necessary to set max_freq on cpu4, cpu5-7 are in same cluster and will
    # automatically get the same settings
    $adb shell 'echo 2457600 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq'
}

cpufreq_marlin_sailfish () {
    echo "Setting Governor to performance"
    # GPU Governor and Frequency
    $adb shell 'echo performance > /sys/class/kgsl/kgsl-3d0/devfreq/governor'
    $adb shell 'echo 624000000 > /sys/class/kgsl/kgsl-3d0/devfreq/max_freq'
    if [ $little_cores_off == true ]; then
        # Disable Little Cores, force app to run on big cores
        echo "Disabling Little Cores"
        $adb shell 'echo 0 > /sys/devices/system/cpu/cpu0/online'
        $adb shell 'echo 0 > /sys/devices/system/cpu/cpu1/online'
    else
        echo "Enabling All Cores"
        $adb shell 'echo 1 > /sys/devices/system/cpu/cpu0/online'
        $adb shell 'echo 1 > /sys/devices/system/cpu/cpu1/online'
        $adb shell 'echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'
        $adb shell 'echo 1996800 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq'
        # cpu1 needed ?
        $adb shell 'echo performance > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor'
        $adb shell 'echo 1996800 > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq'
    fi
    # Set Governor to performance, up scaling_max_frequency to highest
    $adb shell 'echo performance  > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor'
    # Only necessary to set max_freq on cpu2, cpu3 is in same cluster and will
    # automatically get the same settings
    $adb shell 'echo 2150400 > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq'
}

cpufreq_angler () {
    echo "Setting Governor and Frequency"
    # GPU Governor and Frequency
    $adb shell "echo performance > /sys/class/kgsl/kgsl-3d0/devfreq/governor"
    $adb shell "echo 0 > /sys/class/kgsl/kgsl-3d0/bus_split"
    $adb shell "echo 1 > /sys/class/kgsl/kgsl-3d0/force_clk_on"
    $adb shell "echo 10000 > /sys/class/kgsl/kgsl-3d0/idle_timer"
    if [ $little_cores_off == true ]; then
        # Disable Little Cores, force app to run on big cores
        echo "Disabling Little Cores"
        i=0
        num_cores=4
        while [ $i -lt $num_cores ]
        do
            $adb shell "echo 0 > /sys/devices/system/cpu/cpu$i/online"
            i=`expr $i + 1`
        done
    else
        echo "Enabling All Cores"
        # Enable Little cores here, set governor to performance
        # Lock frequency of little cores
        i=0
        num_cores=4
        while [ $i -lt $num_cores ]
        do
            $adb shell "echo 1 > /sys/devices/system/cpu/cpu$i/online"
            $adb shell "echo performance > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
            # Lock frequency of little cores
            $adb shell "echo 1555200 > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq"
            i=`expr $i + 1`
        done
    fi
    i=4
    num_cores=8
    while [ $i -lt $num_cores ]
    do
        $adb shell "echo performance > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
        # Lock frequency of big cores
        $adb shell "echo 1958400 > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq"
        i=`expr $i + 1`
    done
}

cpufreq_go() {
    echo "Setting Governor to performance"
    $adb shell 'echo 0 > /proc/hps/enabled'
    for i in 0 1 2 3
    do
	$adb shell "echo 1 > /sys/devices/system/cpu/cpu$i/online"
	$adb shell "echo performance > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
	$adb shell "echo 1092000 > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq"
    done
}

cpufreq_idc23() {
    echo "TODO: Setting Governor to performance"
}

get_taimen_walleye_devnames () {
    # This bit of code required to get the block dev for /system and /vendor
    # Suffix can be _a or _b, depending on what the active /system partition is
#    suffix=`$adb shell getprop ro.boot.slot_suffix`
    # Get the blockdevice using the suffix we got above
#    system_block_device=`$adb shell ls -l /dev/block/platform/soc/*ufs*/by-name/system$suffix | awk '{ print $10 }' `
    # Vendor is more straightforward, but we don't use it right now
#    vendor_block_device=`$adb shell df /vendor | grep -v Filesystem | awk '{print $1}' `
    # finally extract the last component of the absolute device pathname we got above
#    system_block_device=`echo $system_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
#    vendor_block_device=`echo $vendor_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
    system_bdev_set=true
#   For now, hardcode sda for Marlin/Sailfish block device
#   XXX - We'll get stats for entire device
    system_block_device=sda
    echo Block Device $system_block_device
}

#
# This strange bit of logic is needed to get the underlying block devices for /system
# for Marlin/Sailfish
#
get_marlin_sailfish_devnames () {
    # This bit of code required to get the block dev for /system and /vendor
    # Suffix can be _a or _b, depending on what the active /system partition is
#    suffix=`$adb shell getprop ro.boot.slot_suffix`
    # Get the blockdevice using the suffix we got above
#    system_block_device=`$adb shell ls -l /dev/block/platform/soc/*ufs*/by-name/system$suffix | awk '{ print $10 }' `
    # Vendor is more straightforward, but we don't use it right now
#    vendor_block_device=`$adb shell df /vendor | grep -v Filesystem | awk '{print $1}' `
    # finally extract the last component of the absolute device pathname we got above
#    system_block_device=`echo $system_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
#    vendor_block_device=`echo $vendor_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
    system_bdev_set=true
#   For now, hardcode sda for Marlin/Sailfish block device
#   XXX - We'll get stats for entire device
    system_block_device=sda
    echo Block Device $system_block_device
}

get_angler_devnames () {
    # Get the underlying bdev from the "by-name" mapping
    system_block_device=`$adb shell 'find /dev/block/platform -name by-name | xargs ls -l' | grep system | awk '{ print $10 }' `
    # extract the last component of the absolute device pathname we got above
    system_block_device=`echo $system_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
    # vendor is unused right now, but get the bdev anyway in case we decide to use it
    # Get the underlying bdev from the "by-name" mapping
    vendor_block_device=`$adb shell 'find /dev/block/platform -name by-name | xargs ls -l' | grep vendor | awk '{ print $10 }' `
    # extract the last component of the absolute device pathname we got above
   vendor_block_device=`echo $vendor_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
   system_bdev_set=true
}

get_fugu_devnames () {
    system_block_device=`$adb shell ls -l /dev/block/by-name/system | awk '{ print $10 }' `
    system_block_device=`echo $system_block_device | awk 'BEGIN { FS ="/" } ; { print $4 }' `
    system_bdev_set=true
}

get_idc23_devnames () {
    system_block_device=sdg5
    system_bdev_set=true
}

dev_name_default_mmc () {
    system_block_device=mmcblk0
    system_bdev_set=true
}

get_volantis_devnames () {
    dev_name_default_mmc
}

get_go_devnames () {
    dev_name_default_mmc
}

system_stats_before() {
    if [ $system_bdev_set == true ]; then
        # Get BEFORE read stats for /system
        system=`$adb shell 'cat /proc/diskstats' | grep -w $system_block_device`
        BEFORE_RD_IOS_SYSTEM=`echo $system | awk '{ print $4 }'`
        BEFORE_RD_SECTORS_SYSTEM=`echo $system | awk '{ print $6 }'`
        # iowait% computation
        procstat=`$adb shell 'cat /proc/stat' | grep -w cpu`
        user_ticks_before=`echo $procstat | awk '{ print ($2 + $3) }'`
        sys_ticks_before=`echo $procstat | awk '{ print ($4 + $7 + $8) }'`
        cpubusy_ticks_before=`echo $procstat | awk '{ print ($2 + $3 + $4 + $7 + $8) }'`
        iowait_ticks_before=`echo $procstat | awk '{ print $6 }'`
        total_ticks_before=`echo $procstat | awk '{ print ($2 + $3 + $4 + $5 + $7 + $8) }'`
        # Device util% computation
        uptime=`$adb shell 'cat /proc/uptime'`
        uptime_before_ms=`echo $uptime | awk '{ print ($1 * 1000) }'`
        device_util_before_ms=`echo $system | awk '{ print ($13) }'`
    fi
}

system_stats_after() {
    if [ $system_bdev_set == true ]; then
        # Get AFTER read stats for /system
        system=`$adb shell 'cat /proc/diskstats' | grep -w $system_block_device`
        AFTER_RD_IOS_SYSTEM=`echo $system | awk '{ print $4 }'`
        AFTER_RD_SECTORS_SYSTEM=`echo $system | awk '{ print $6 }'`
        # iowait% computation
        procstat=`$adb shell 'cat /proc/stat' | grep -w cpu`
        user_ticks_after=`echo $procstat | awk '{ print ($2 + $3) }'`
        sys_ticks_after=`echo $procstat | awk '{ print ($4 + $7 + $8) }'`
        cpubusy_ticks_after=`echo $procstat | awk '{ print ($2 + $3 + $4 + $7 + $8) }'`
        iowait_ticks_after=`echo $procstat | awk '{ print $6 }'`
        total_ticks_after=`echo $procstat | awk '{ print ($2 + $3 + $4 + $5 + $7 + $8) }'`
        # Device util% computation
        uptime=`$adb shell 'cat /proc/uptime'`
        uptime_after_ms=`echo $uptime | awk '{ print ($1 * 1000) }'`
        device_util_after_ms=`echo $system | awk '{ print ($13) }'`
    fi
}

system_stats_delta() {
    if [ $system_bdev_set == true ]; then
        # Sectors to KB
        READ_KB_SYSTEM=`expr $AFTER_RD_SECTORS_SYSTEM - $BEFORE_RD_SECTORS_SYSTEM`
        READ_KB_SYSTEM=`expr $READ_KB_SYSTEM / 2`
        echo Read IOs /system = `expr $AFTER_RD_IOS_SYSTEM - $BEFORE_RD_IOS_SYSTEM`
        echo Read KB /system = $READ_KB_SYSTEM
        echo $iowait_ticks_before $iowait_ticks_after $total_ticks_before $total_ticks_after | awk '{ printf "IOwait = %.2f\n", (($2 - $1) * 100.0) / ($4 - $3) }'
        echo $device_util_before_ms $device_util_after_ms $uptime_before_ms $uptime_after_ms | awk '{ printf "Device util%% = %.2f\n", (($2 - $1) * 100.0) / ($4 - $3) }'
        echo $user_ticks_after $user_ticks_before $total_ticks_after $total_ticks_before | awk '{ printf "User CPU util%% = %.2f\n", (($1 - $2) * 100.0) / ($3 - $4) }'
        echo $sys_ticks_after $sys_ticks_before $total_ticks_after $total_ticks_before | awk '{ printf "Sys CPU util%% = %.2f\n", (($1 - $2) * 100.0) / ($3 - $4) }'
        echo $cpubusy_ticks_after $cpubusy_ticks_before $total_ticks_after $total_ticks_before | awk '{ printf "Total CPU util%% = %.2f\n", (($1 - $2) * 100.0) / ($3 - $4) }'
    fi
}

launch_app() {
    package=$1
    activity=$2
    $adb shell "am force-stop $package"
    sleep 1

    printf "Testing %s: \n" "$package" 1>&2
    i=0
    while [ $i -lt $iterations ]
    do
        if [ $pagecached == false ]; then
            $adb shell 'echo 3 > /proc/sys/vm/drop_caches'
        fi
        printf '[ %d%% ]\r' "$(($i * 100 / $iterations))" 1>&2
        # The -W argument to am start forces am start to wait till the launch completes.
        # The -S argument forces it to kill any existing app that is running first
        # eg. adb shell 'am start -W -S -n com.android.chrome/com.google.android.apps.chrome.Main'
        system_stats_before
        $adb shell "simpleperf stat -a am start -W -n $package/$activity"
        system_stats_after
        system_stats_delta
        sleep 1
        $adb shell "am force-stop $package"
        sleep 1
        i=`expr $i + 1`
    done
    printf "\n" 1>&2
}

launch_fugu_apps() {
    launch_app com.google.android.youtube.tv com.google.android.apps.youtube.tv.activity.TvGuideActivity > $BASHPID-youtube-$model
    getstats $BASHPID-youtube-$model YouTube
    launch_app com.google.android.play.games com.google.android.gms.games.pano.activity.PanoGamesOnboardHostActivity > $BASHPID-games-$model
    getstats $BASHPID-games-$model Games
    launch_app com.google.android.music com.android.music.activitymanagement.TopLevelActivity > $BASHPID-music-$model
    getstats $BASHPID-music-$model Music
}

launch_phone_apps() {
    launch_app com.android.chrome com.google.android.apps.chrome.Main > $BASHPID-chrome-$model
    getstats $BASHPID-chrome-$model Chrome
    launch_app com.google.android.GoogleCamera com.android.camera.CameraActivity > $BASHPID-camera-$model
    getstats $BASHPID-camera-$model Camera
    launch_app com.google.android.apps.maps com.google.android.maps.MapsActivity > $BASHPID-maps-$model
    getstats $BASHPID-maps-$model Maps
    launch_app com.google.android.youtube com.google.android.apps.youtube.app.WatchWhileActivity > $BASHPID-youtube-$model
    getstats $BASHPID-youtube-$model YouTube
}

launch_go_apps() {
    launch_app com.android.chrome com.google.android.apps.chrome.Main > $BASHPID-chrome-$model
    getstats $BASHPID-chrome-$model Chrome
    launch_app com.google.android.gm .ConversationListActivityGmail > $BASHPID-gmail-$model
    getstats $BASHPID-gmail-$model Gmail
    launch_app com.google.android.videos .mobile.usecase.home.RootActivity > $BASHPID-movies-$model
    getstats $BASHPID-movies-$model Movies
    launch_app com.android.vending com.google.android.finsky.activities.MainActivity > $BASHPID-play-$model
    getstats $BASHPID-play-$model Play
}

launch_idc23_apps() {
    # First test the reference apps...
    # PerfoRefLauncher
    launch_app com.bmwgroup.apinext.perforeflauncher com.bmwgroup.apinext.perforeflauncher.MainActivity > $BASHPID-perforeflauncher-$model
    getstats $BASHPID-perforeflauncher-$model PerfoRefLauncher

    # PerfoRefApp
    launch_app com.bmwgroup.apinext.perforefapp com.bmwgroup.apinext.perforefapp.MainActivity > $BASHPID-perforefapp-$model
    getstats $BASHPID-perforefapp-$model PerfoRefApp

    # PerfoUiLibRefApp
    launch_app com.bmwgroup.apinext.perfouilibrefapp com.bmwgroup.apinext.perfouilibrefapp.UiLibMainActivity > $BASHPID-perfouilibrefapp-$model
    getstats $BASHPID-perfouilibrefapp-$model PerfoUiLibRefApp

    # ...then test the core apps.
    # BMW ID Launcher/All apps view
    launch_app com.bmwgroup.idnext.launcher com.bmwgroup.idnext.launcher.allapps.AppOverviewActivity > $BASHPID-launcher-$model
    getstats $BASHPID-launcher-$model Launcher

    # BMW ID Launcher/Main Activity (Home Page with widgets)
    launch_app com.bmwgroup.idnext.launcher com.bmwgroup.idnext.launcher.MainActivity > $BASHPID-launchermain-$model
    getstats $BASHPID-launchermain-$model LauncherMain

    # Navigation
    launch_app com.bmwgroup.idnext.navigation com.bmwgroup.idnext.navigation.map.MainActivity > $BASHPID-navigation-$model
    getstats $BASHPID-navigation-$model Navigation

    # Media
    launch_app com.bmwgroup.apinext.mediaapp com.bmwgroup.apinext.mediaapp.player.MediaActivity > $BASHPID-media-$model
    getstats $BASHPID-media-$model Media

    # Settings
    launch_app com.bmwgroup.idnext.settings com.bmwgroup.idnext.settings.SettingsActivity > $BASHPID-settings-$model
    getstats $BASHPID-settings-$model Settings

    # Parking
    launch_app com.bmwgroup.apinext.parking com.bmwgroup.apinext.parking.MainActivity > $BASHPID-parking-$model
    getstats $BASHPID-parking-$model Parking

    # Climate
    launch_app com.bmwgroup.apinext.climate com.bmwgroup.apinext.climate.ClimateMainActivity > $BASHPID-climate-$model
    getstats $BASHPID-climate-$model Climate

    # App Store
    launch_app com.bmwgroup.apinext.appstore com.bmwgroup.apinext.appstore.MainActivity.Alias > $BASHPID-appstore-$model
    getstats $BASHPID-appstore-$model appstore

    # Carplay
    launch_app com.bmwgroup.idnext.carplay com.bmwgroup.idnext.carplay.view.LaunchActivity > $BASHPID-carplay-$model
    getstats $BASHPID-carplay-$model Carplay

    # BMW Audio Settings
    launch_app com.bmwgroup.apinext.bmwaudiosettings com.bmwgroup.apinext.bmwaudiosettings.MainActivity > $BASHPID-bmwaudiosettings-$model
    getstats $BASHPID-bmwaudiosettings-$model BMWAudioSettings

    # Charging
    launch_app com.bmwgroup.apinext.charging com.bmwgroup.apinext.charging.MainActivity > $BASHPID-charging-$model
    getstats $BASHPID-charging-$model Charging

    # Display Settings
    launch_app com.bmwgroup.apinext.displaysettings com.bmwgroup.apinext.displaysettings.MainActivity > $BASHPID-displaysettings-$model
    getstats $BASHPID-displaysettings-$model DisplaySettings

    # Door & Window
    launch_app com.bmwgroup.apinext.doorwindow com.bmwgroup.apinext.doorwindow.DoorsWindowsActivity > $BASHPID-doorwindow-$model
    getstats $BASHPID-doorwindow-$model DoorWindow

    # Driving Settings
    launch_app com.bmwgroup.apinext.drivingsettings com.bmwgroup.apinext.drivingsettings.MainActivity > $BASHPID-drivingsettings-$model
    getstats $BASHPID-drivingsettings-$model DrivingSettings

    # Exterior Light
    launch_app com.bmwgroup.apinext.exteriorlight com.bmwgroup.apinext.exteriorlight.MainActivity > $BASHPID-exteriorlight-$model
    getstats $BASHPID-exteriorlight-$model ExteriorLight

    # Interior Light
    launch_app com.bmwgroup.apinext.interiorlight com.bmwgroup.apinext.interiorlight.MainActivity > $BASHPID-interiorlight-$model
    getstats $BASHPID-interiorlight-$model InteriorLight

    # Live Vehicle
    launch_app com.bmwgroup.apinext.livevehicle com.bmwgroup.apinext.livevehicle.MainActivity > $BASHPID-livevehicle-$model
    getstats $BASHPID-livevehicle-$model LiveVehicle

    # Vehicle Status
    launch_app com.bmwgroup.apinext.livevehicle com.bmwgroup.apinext.livevehicle.VehicleStatusActivity > $BASHPID-vehiclestatus-$model
    getstats $BASHPID-vehiclestatus-$model VehicleStatus


    # Connectivity: Navigation Device Manager
    launch_app com.bmwgroup.idnext.connectivity com.bmwgroup.idnext.connectivity.nav.device_manager.NavDeviceManagerHostActivity > $BASHPID-connectivity-$model
    getstats $BASHPID-connectivity-$model NavDeviceManager

    # Seats Comfort
    launch_app com.bmwgroup.apinext.seats com.bmwgroup.apinext.seats.MainActivity > $BASHPID-seats-$model
    getstats $BASHPID-seats-$model SeatsComfort

    # Personal Assistant
    launch_app com.bmwgroup.apinext.ipaapp com.bmwgroup.apinext.ipaapp.MainActivity  > $BASHPID-ipaapp-$model
    getstats $BASHPID-ipaapp-$model PersonalAssistant

    # Wifi Connections
    launch_app com.bmwgroup.idnext.connectivity com.bmwgroup.idnext.connectivity.nav.settings.NavWifiSettingsHostActivity > $BASHPID-navwifisettings-$model
    getstats $BASHPID-navwifisettings-$model WifiConnections

    # Alexa
    launch_app com.bmwgroup.assistant.alexa com.bmwgroup.assistant.ui.startup.StartupActivity > $BASHPID-alexa-$model
    getstats $BASHPID-alexa-$model Alexa

    # Connectivity: Bluetooth Telephony
    launch_app com.bmwgroup.idnext.connectivity com.bmwgroup.idnext.connectivity.nav.RoutingMainActivity > $BASHPID-connectivity-$model
    getstats $BASHPID-connectivity-$model BluetoothTelephony

    # Data Privacy App
    launch_app com.bmwgroup.apinext.dataprivacyapp com.bmwgroup.apinext.dataprivacyapp.presentation.main.MainActivity > $BASHPID-dataprivacy-$model
    getstats $BASHPID-dataprivacy-$model DataPrivacy

    # BMW ID App (Perso-App)
    launch_app com.bmwgroup.idnext.perso com.bmwgroup.idnext.perso.view.MainActivity > $BASHPID-bmwid-$model
    getstats $BASHPID-bmwid-$model BMWId

    # BMW Notification App
    launch_app com.bmwgroup.idnext.bmwnotifications com.bmwgroup.idnext.bmwnotifications.MainActivity > $BASHPID-bmwnotifications-$model
    getstats $BASHPID-bmwnotifications-$model BMWNotification

    # Owner's Handbook App
    launch_app com.bmwgroup.driversguide.row.idc com.bmwgroup.driversguide.ui.home.HomeActivity > $BASHPID-ownersshandbook-$model
    getstats $BASHPID-ownersshandbook-$model OwnerssHandbook

    # Android Car Settings App
    launch_app com.android.car.settings com.android.car.settings.Settings_Launcher_Homepage > $BASHPID-androidcarsettings-$model
    getstats $BASHPID-androidcarsettings-$model AndroidCarSettings

    #..........................Not working:
    # Service Partner
    launch_app com.bmwgroup.apinext.servicepartner com.bmwgroup.apinext.servicepartner.ui.MainActivity > $BASHPID-servicepartner-$model
    getstats $BASHPID-servicepartner-$model ServicePartner

    # Message
    launch_app com.bmwgroup.apinext.messagehandling com.bmwgroup.apinext.messagehandling.activities.MainActivity > $BASHPID-messagehandling-$model
    getstats $BASHPID-messagehandling-$model Message

    # China navigation TODO: check how to test this
    #launch_app com.bmwgroup.idnext.china.navigation com.bmwgroup.idnext.china.navigation.map.MainActivity > $BASHPID-china-navigation-$model
    #getstats $BASHPID-china-navigation-$model ChinaNavigation
}

usage() {
    echo 'Usage:perfo-app-launcher -a|-b|-u [-c|-v|-s <serial num>] num-iterations [-r <path/to/store/the/file>]'
    echo '-a: Run on all cores'
    echo '-b: Run only big cores'
    echo '-c: Optional, pagecached. Dont drop pagecache before each launch (not default)'
    echo '-h: Dump help menu'
    echo '-r: Optional, path where you want to store the csv file if you want a different one from the dir where you are executing the script'
    echo '-s <serial number>: Optional, specify serial number if multiple devices are attached to host'
    echo '-u: user experience, no change to cpu/gpu frequencies or governors'
    echo '-v: Optional, Verbose mode, prints stats on a lot of metrics'
    echo 'num-iterations : Must be >= 50 to get statistically valid data.'
    echo $'\nNotes: -a|-b|-u one of this parameters is required:'
    echo $'\t-a: all cores'
    echo $'\t-b: only big cores'
    echo $'\t-u: user experience, no change to cpu/gpu frequencies or governors'
    echo $'\t\t-a/-b locks CPU/GPU freqs to max, performance governor, thermal/perfd off'
    echo $'\t\t-u runs with default device configs, as users would see it'
    exit 1
}

setup() {
    echo "Setting up device"
    # Set developer options, will automatically 'Stay Awake'
    $adb shell 'am start -n com.android.settings/.DevelopmentSettings'
    # Set screen timeout to 30 minutes
    $adb shell 'settings put system screen_off_timeout 1800000'

    # TODO: Consider rebooting device to start with a clean state

    # Disable automatic rotation and NFC
    # This works on OC, but haven't tested on NYC or earlier
    $adb shell 'content insert --uri content://settings/system --bind name:s:accelerometer_rotation --bind value:i:0'
    $adb shell 'svc nfc disable'

    # Clear all notifications
    $adb shell 'service call notification 1'
    # Go to home screen
    $adb shell 'input keyevent KEYCODE_WAKEUP' && sleep 0.5
    $adb shell 'input keyevent KEYCODE_MENU'   && sleep 0.5
    $adb shell 'input keyevent KEYCODE_HOME'   && sleep 0.5
    sleep 2
    # TODO: kill all background apps
    # TODO: clear popups
}

#
# The main() part of the script follows :
#

if [ $# -lt 2 ]; then
    usage
fi

computestats="perfo-computestats"
computestatsf="perfo-computestatsf"

which $computestats > /dev/null
if [ $? != 0 ]; then
    echo "ERROR: Please add $computestats utiliy to your PATH"
    exit 1
fi

which $computestatsf > /dev/null
if [ $? != 0 ]; then
    echo "Error: Please add $computestatsf utility to your PATH"
    exit 1
fi

parseoptions $@

$adb wait-for-device
$adb root

if [ $user_experience == false ]; then
    # Important to stop the thermal-engine to prevent throttling while test is running
    # and stop perfd
    $adb shell 'stop thermal-engine'
    $adb shell 'stop perfd'
else
    echo "User Experience: Default Configs. No changes to cpufreq settings"
fi

model=`$adb shell getprop ro.product.name`
# Releases are inconsistent with various trailing characters, remove them all
model=`echo $model | sed 's/[ \t\r\n]*$//' `

echo Found $model Device

system_bdev_set=false
case $model in
    # Android Go
    aosp_gobo | full_k37_y33_gms | gobo | gobo_512)
	if [ $user_experience == false ]; then
	    cpufreq_go
        fi
	get_go_devnames
        ;;
    taimen | muskie | walleye)
        if [ $user_experience == false ]; then
            cpufreq_taimen_walleye
        fi
        get_taimen_walleye_devnames
        ;;
    marlin | sailfish)
        if [ $user_experience == false ]; then
            cpufreq_marlin_sailfish
        fi
        get_marlin_sailfish_devnames
        ;;
    angler)
        if [ $user_experience == false ]; then
            cpufreq_angler
        fi
        get_angler_devnames
        ;;
    fugu)
        if [ $user_experience == false ]; then
            cpufreq_fugu
        fi
        get_fugu_devnames
        ;;
    volantis | volantisg)
        if [ $user_experience == false ]; then
            cpufreq_volantis
        fi
        get_volantis_devnames
        ;;
    bmw_idc23 | bmw_idc23_cn)
        if [ $user_experience == false ]; then
            cpufreq_idc23
        fi
        get_idc23_devnames
        ;;
    *)
        echo Unknown Device $model
        exit 1
        ;;
esac

setup

#
# launch each app in turn
#
case $model in
    # Android Go
    aosp_gobo | full_k37_y33_gms | gobo | gobo_512)
	launch_go_apps
	;;
    fugu)
	launch_fugu_apps
        ;;
    bmw_idc23 | bmw_idc23_cn)
        launch_idc23_apps
        ;;
    *)
	launch_phone_apps
        ;;
esac

# cleanup
rm $BASHPID*
