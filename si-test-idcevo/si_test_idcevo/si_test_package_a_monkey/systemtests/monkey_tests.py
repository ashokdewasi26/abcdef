import logging
from pathlib import Path

from mtee.testing.test_environment import TEST_ENVIRONMENT
from mtee.testing.tools import assert_true, metadata
from si_test_idcevo.si_test_helpers.android_monkey_utils import CreateMonkeyFile, MonkeyRunnerTest
from si_test_idcevo.si_test_helpers.android_testing.test_base import TestBase
from si_test_idcevo.si_test_helpers.reboot_handlers import wait_for_application_target


logger = logging.getLogger(__name__)


class TestMonkey:
    ref_files_dir = Path(__file__).parent
    monkey_file = ""
    nr_monkey_interaction_per_package = 210

    @classmethod
    def setup_class(cls):
        cls.test = TestBase.get_instance()
        cls.test.setup_base_class()
        wait_for_application_target(cls.test.mtee_target)

    @classmethod
    def teardown_class(cls):
        cls.test.teardown_base_class()

    @metadata(
        testsuite=["SI-android"],
        component="tee_idcevo",
        domain="IDCEvo Test",
    )
    def test_001_monkey_stress_autogenerated_script(self):
        """
        [SIT_Automated] Monkey stress testing with newly generated script

        Steps:
            1 - Call CreateMonkeyFile class, this will get package activities and available inputs
            2 - Validate package activities
            3 - Write new monkey.script
            3 - Run monkey.script script
        """
        monkey_file = CreateMonkeyFile(test_target=self.test, ref_files=self.ref_files_dir)
        monkey_file.write_to_file(self.nr_monkey_interaction_per_package)
        monkey_stress = MonkeyRunnerTest(test_target=self.test, monkey_script=monkey_file.monkey_script_name)
        monkey_stress.start_monkey_test(
            timeout=1200, monkey_test_name="autogenerated_script"
        )  # 20min should be more than enough unless something happens

    @metadata(
        testsuite=["SI-performance"],
        component="tee_idcevo",
        domain="IDCEvo Test",
    )
    def test_002_monkey_stress_pinned_script(self):
        """
        [SIT_Automated] Monkey stress testing with a pinned script

        Steps:
            1 - Get all the apps available and order them alphabetically
            2 - Generate a script with all the apps available
                performing a fixed set of action in between apps
            3 - Run the generated performance_monkey.script
        """
        monkey_file = CreateMonkeyFile(test_target=self.test, ref_files=self.ref_files_dir)

        actions_file = self.ref_files_dir / "performance_reference_actions"
        if self.test.mtee_target.has_capability(TEST_ENVIRONMENT.test_bench.rack):
            actions_file = self.ref_files_dir / "ref_files/performance_reference_actions"
        monkey_file.create_new_script_with_fixed_actions(actions_file)

        assert_true(
            Path(monkey_file.monkey_script_fixed_actions_name).is_file(),
            f"Monkey script wasn't found. Expected path: {monkey_file.monkey_script_fixed_actions_name}",
        )
        monkey_stress = MonkeyRunnerTest(
            test_target=self.test, monkey_script=monkey_file.monkey_script_fixed_actions_name
        )
        monkey_stress.start_monkey_test(timeout=3600, monkey_test_name="pinned_script")
